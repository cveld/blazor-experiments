@page "/"
@inject VacationContext context
@using BlazorServerSide.Data
@using BlazorServerSide.Models
@using BlazorServerSide.Features.Vacation
@using BlazorServerSide.Components.Vacation

<h3>Index</h3>

<div class="pages">
    <div class="wrapper-overview">
        <ol class="overview">
            @foreach (var vacation in vacations)
            {
                var exists = vacation.Likes?.Where(u => u.Name == CurrentUser).Any() ?? false;
                var classes = new List<string>();
                if (focusIndex == -1 || focusIndex == vacation.ID)
                {
                    classes.Add("is-active");
                }
                if (focusIndex == vacation.ID)
                {
                    classes.Add("is-special");
                }

                <li class="@string.Join(" ", classes)" @onmouseenter="() => onAction(vacation.ID)" @onmouseleave="() => onAction(-1)">
                    @*<VacationItem Vacation="@vacation" Liked="@exists" OnFavoriteClicked="() => OnFavoriteClicked(vacation)" />*@
                    <Vacation Vacation="@vacation" />
                </li>
            }
        </ol>
    </div>
</div>

@code {
    int focusIndex = -1;


    List<VacationModel> vacations;
    [CascadingParameter]
    string CurrentUser { get; set; }

    protected override async Task OnParametersSetAsync()
    {
    }

    protected override void OnAfterRender(bool firstRender)
    {
    }

    protected override async Task OnInitializedAsync()
    {
        vacations = context.Vacations.ToList();
        CurrentUser = "dummy";
    }

    void OnFavoriteClicked(VacationModel vacation)
    {
        var user = vacation.Likes?.Where(u => u.Name == CurrentUser).FirstOrDefault();
        if (user != null)
        {
            vacation.Likes.Remove(user);
        }
        else
        {
            if (vacation.Likes == null)
            {
                vacation.Likes = new HashSet<User>();
            }
            vacation.Likes.Add(new User
            {
                Name = CurrentUser
            });
        }
    }

    void onAction(int index) {
        this.focusIndex = index;
    }
}
